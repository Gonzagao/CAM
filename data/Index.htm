
<!doctype html>                             
<html>
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width,initial-scale=1">
        <title>MONITORAMENTO</title>
        <script src='/web?jquery.min.js'></script>
        <style>
            :root {
            --itemColor: red;
            }
            body {
                font-family: Arial,Helvetica,sans-serif;
                background: #181818;
                color: #EFEFEF;
                font-size: 16px
            }

            h2 {
                font-size: 18px;
                padding-left: 10px;
            }
            
            h3 {
                font-style: italic;
                font-size: 14px;
                padding-left: 5px;
            }
            h6 {
                font-style: bold;
                font-size: 9px;
                padding-left: 15px;
            }
            
           .center{
                text-align: center; 
           }
           
           .navtop{
                list-style: none;
           }
           .navtop li {
             float: left;
             position: relative;
           }
             
           nav#maintoolbar {
              display: flex;
              flex-wrap: nowrap;
              justify-content: flex-end;
              overflow: auto;
           }
                        
           section#main {
              display: flex;
              flex-direction: column;
           }
            
           section#header {
              min-width: 332px;
              background-color: #363636;
              margin-bottom: 3px;
              padding: 4px 12px;
              display: flex;
              flex-wrap: wrap;
              border-radius: 4px;
              justify-content: space-between;
           }
           #sidebar{
               margin: 0px;
              padding: 0px;         
              width: 100%;
           }                        
           section#title{
              display: flex;
           }
           section#footer {
              min-width: 332px;
              background-color: #363636;
              margin-top: 0px;
              padding: 4px 12px;
              display: flex;
              flex-wrap: wrap;
              border-radius: 4px;
              justify-content: space-between;
              font-size: 11px;
            }
            nav.menu {
              display: grid;
              flex-direction: column;
              flex-wrap: nowrap;
              min-width: 332px;
              background: #363636;
              padding: 8px;
              border-radius: 4px;
              margin-bottom: 3px;
              cursor: pointer;
            }
            
            #content {
                display: flex;
                flex-wrap: wrap;
                align-items: stretch
            }

            figure {
                padding: 0px;
                margin: 0;
                width: 100%;
                height: auto;
               -webkit-margin-before: 0;
                margin-block-start: 0;
                -webkit-margin-after: 0;
                margin-block-end: 0;
                -webkit-margin-start: 0;
                margin-inline-start: 0;
                -webkit-margin-end: 0;
                margin-inline-end: 0;
           }
           .image-container {
              position: relative;
           }

            figure img {
                display: block;
                width: 100%;
                height: auto;
                border-radius: 4px;
            }

            @media (min-width: 800px) and (orientation:landscape) {
                #content {
                    display:flex;
                    flex-wrap: nowrap;
                    align-items: stretch
                }
               #sidebar{
                  width: auto;
               }
               figure img {
                    display: block;
                    width: 100%;
                    height: auto
                }

                figure {
                    padding: 0 0 0 0px;
                    margin: 0;
                    width: 100%;
                    height: 100%; 
                    -webkit-margin-before: 0;
                    margin-block-start: 0;
                    -webkit-margin-after: 0;
                    margin-block-end: 0;
                    -webkit-margin-start: 0;
                    margin-inline-start: 0;
                    -webkit-margin-end: 0;
                    margin-inline-end: 0
                }
            }

            section#buttons {
                display: flex;
                flex-wrap: nowrap;
                justify-content: center;
            }

            .input-group {
                position: relative;
                display: flex;
                flex-wrap: nowrap;
                line-height: 29px;
                margin: 5px 0
            }
            .info-group {
                position: relative;                               
                margin: 5px 0;
                
            }
            .input-group>label {
                display: inline-block;
                padding-right: 10px;
                min-width: 47%;
           }
           .input-group>input {
                width: 100%;
           }

            .input-group input,.input-group select {
                flex-grow: 1
            }

            .range-max,.range-min {
                display: inline-block;
                padding: 0 5px;
            }

            button {
            		min-height: 35px;
                display: block;
                margin: 5px;
                padding: 0 6px;
                border: 0;
                line-height: 20px;
                cursor: pointer;
                color: #fff;
                background: var(--itemColor);
                border-radius: 5px;
                font-size: 16px;
                outline: 0
            }

            button:hover {
                background: #ff494d
            }

            button:active {
                background: green
            }

            button.disabled {
                cursor: default;
                background: #a0a0a0
            }

            input[type=range] {
                -webkit-appearance: none;
                width: 100%;
                height: 22px;
                background: #363636;
                cursor: pointer;
                margin: 0
            }

            input[type=range]:focus {
                outline: 0
            }

            input[type=range]::-webkit-slider-runnable-track {
                width: 100%;
                height: 2px;
                cursor: pointer;
                background: #EFEFEF;
                border-radius: 0;
                border: 0 solid #EFEFEF
            }

            input[type=range]::-webkit-slider-thumb {
                border: 1px solid rgba(0,0,30,0);
                height: 22px;
                width: 22px;
                border-radius: 50px;
                background: var(--itemColor);
                cursor: pointer;
                -webkit-appearance: none;
                margin-top: -11.5px
            }

            input[type=range]:focus::-webkit-slider-runnable-track {
                background: #EFEFEF
            }

            input[type=range]::-moz-range-track {
                width: 100%;
                height: 2px;
                cursor: pointer;
                background: #EFEFEF;
                border-radius: 0;
                border: 0 solid #EFEFEF
            }

            input[type=range]::-moz-range-thumb {
                border: 1px solid rgba(0,0,30,0);
                height: 22px;
                width: 22px;
                border-radius: 50px;
                background: var(--itemColor);
                cursor: pointer
            }

            input[type=range]::-ms-track {
                width: 100%;
                height: 2px;
                cursor: pointer;
                background: 0 0;
                border-color: transparent;
                color: transparent
            }

            input[type=range]::-ms-fill-lower {
                background: #EFEFEF;
                border: 0 solid #EFEFEF;
                border-radius: 0
            }

            input[type=range]::-ms-fill-upper {
                background: #EFEFEF;
                border: 0 solid #EFEFEF;
                border-radius: 0
            }

            input[type=range]::-ms-thumb {
                border: 1px solid rgba(0,0,30,0);
                height: 22px;
                width: 22px;
                border-radius: 50px;
                background: var(--itemColor);
                cursor: pointer;
                height: 2px
            }

            input[type=range]:focus::-ms-fill-lower {
                background: #EFEFEF
            }

            input[type=range]:focus::-ms-fill-upper {
                background: #363636
            }

            input, #applog, #sdlog   {
                font:20px 'Courier New';
                font-weight:bold;
                color: navy;
            }
            
           .configGroup td {
              border: solid 2px #ddd;
            }
            
            #applog, #sdlog {
              height:90%;
              width:90%;
              border:2px solid #ccc;
              overflow:auto;
              background-color: white;
            }
    
            .switch {
                display: block;
                position: relative;
                line-height: 22px;
                font-size: 16px;
                height: 22px
            }

            .switch input {
                outline: 0;
                opacity: 0;
                width: 0;
                height: 0
            }

            .slider {
                width: 50px;
                height: 22px;
                border-radius: 22px;
                cursor: pointer;
                background-color: grey
            }

            .slider,.slider:before {
                display: inline-block;
                transition: .4s
            }

            .slider:before {
                position: relative;
                content: "";
                border-radius: 50%;
                height: 16px;
                width: 16px;
                left: 4px;
                top: 3px;
                background-color: #fff
            }

            input:checked+.slider {
                background-color: var(--itemColor)
            }

            input:checked+.slider:before {
                -webkit-transform: translateX(26px);
                transform: translateX(26px)
            }

            select {
                border: 1px solid #363636;
                font-size: 14px;
                height: 22px;
                outline: 0;
                border-radius: 5px
            }

            .close {
                position: absolute;
                right: 5px;
                top: 5px;
                background: var(--itemColor);
                width: 16px;
                height: 16px;
                border-radius: 100px;
                color: #fff;
                text-align: center;
                line-height: 18px;
                cursor: pointer
            }
            
            .maximize {
                position: absolute;
                right: 25px;
                top: 5px;
                background: var(--itemColor);
                width: 16px;
                height: 16px;
                border-radius: 100px;
                color: #fff;
                text-align: center;
                line-height: 18px;
                cursor: pointer
            }
            .hidden {
                display: none
            }
            output {
              position: absolute;
              top: -32px;
              display: none;
              width: 50px;
              height: 24px;
              border: 1px solid #e2e2e2;
              background-color: #FFE4C4;
              border-radius: 3px;
              color: #777;
              font-size: .8em;
              font-weight: bold;
              line-height: 24px;
              text-align: center;
            }

            .extras {
                display: none;
            }

            input[type=range]:active + output {
              display: block;
              -webkit-transform: translateX(180px);
            }
            
            .nav-toggle {
                cursor: pointer;
            }
            
            #control-cb, #settings-cb, #other-cb{
              display: none;
            }

            #control-cb:not(:checked)+ label + div, #settings-cb:not(:checked)+ label + div, #other-cb:not(:checked)+ label + div 
            { 
              display: none; 
            }
            .info{
              margin-top: 2px;
            }
            .info-group label {
              color: dimgray;
            }
            .blinking {
              animation: blinker 1s linear infinite;
            }
            
            @keyframes blinker {
              50% {
                opacity: 0;
              }
            }

    .tab {
      overflow: hidden;
      background-color: #363636;
    }

    .tab button {
      background-color: --itemColor;
      float: left;
      border: none;
      outline: none;
      cursor: pointer;
      padding: 14px 16px;
      transition: 0.3s;
      font-size: 17px;
    }

    .tab button.active {
       background-color: green;
    }

    .tabcontent {
      display: none;
    }
    
   .grid-cols2 {
      grid-template-columns: 200px 200px;
    }

   .grid-cols4 {
      grid-template-columns: 150px 150px 150px 150px
    }
    
    .cfgTitle {
      grid-column: 1/5;
      text-align: left;
    }

    .grid-cols2, .grid-cols4 {
      display: grid;
      background-color: none;
      text-align: center;
      font-size: 30px;
      border: 0px solid black;
      dominant-baseline: middle;
      text-anchor: middle;
    }
    
    rect {
       fill: silver;
       width: 100%;
       height: 100%; 
       x: 0;
       y: 0;
       rx: 5%;
     }
    
    rect:hover {
      fill: DarkGrey;
    }
    
    rect:active {
      fill: DarkSeaGreen;
    }
  
    text {
      pointer-events: none;
    }

      </style>
    </head>
    <body>
    <div class="tab">
      <button class="tablinks active">Câmera</button>
      <button class="tablinks">Mostrar LOG</button>
      <button class="tablinks">Configuração</button>
      <button class="tablinks">Atualizar</button>
    </div>
    <div id="Câmera" class="tabcontent" style="display:block">
        <section id="main">
            <section id="header">
              <section id="title">
                <h2 id="page-title">MONITORAMENTO</h2>&nbsp;
                <h6 id="fw_version" class="default-action displayonly"></h6>
              </section>
              <nav id="maintoolbar">
              	<ul class="navtop">
                  <li><button id="forceRecord" class="default-action" style="float:right;">Gravar</button></li>
                  <li><button id="get-still" style="float:right;">Tirar foto</button></li>
                  <li><button id="toggle-stream" style="float:right;">Ver câmera</button></li>
                </ul>  
              </nav>
            </section>          
            <div id="content">
                <div id="sidebar">
                    <nav class="menu">                                                                
                        <input type="checkbox" id="control-cb" class="menu-action" checked="checked">
                        <label for="control-cb" class="nav-toggle">&#9776;&nbsp;&nbsp;Controle da câmera&nbsp;&nbsp;</label>
                        <div>                    
                          <div class="input-group" id="framesize-group">
                              <label for="framesize">Resolução</label>
                              <select id="framesize" class="default-action">
                                  <option value="13">UXGA(1600x1200)</option>
                                  <option value="12">SXGA(1280x1024)</option>
                                  <option value="11">HD(1280x720)</option>
                                  <option value="10">XGA(1024x768)</option>
                                  <option value="9" selected="selected">SVGA(800x600)</option> 
                                  <option value="8">VGA(640x480)</option> 
                                  <option value="7">HVGA(480x320)</option>
                                  <option value="6">CIF(400x296)</option> 
                                  <option value="5">QVGA(320x240)</option>
                                  <option value="4">240X240</option> 
                                  <option value="3">HQVGA(240x176)</option> 
                                  <option value="2">QCIF(176x144)</option> 
                                  <option value="1">QQVGA(160x120)</option> 
                                  <option value="0">96X96</option>
                              </select>
                          </div>
                          <div class="input-group" id="fps-group">
                              <label for="fps">FPS</label>
                              <div class="range-min">1</div>
                              <input title="Set camera required frames per second" type="range" id="fps" min="1" max="30" value="10" class="default-action">
                              <output name="rangeVal">15</output>
                              <div class="range-max">30</div>
                          </div>
                          <div class="input-group" id="quality-group">
                              <label for="quality">Qualidade</label>
                              <div class="range-min">10</div>
                              <input title="Set the recording quality" type="range" id="quality" min="10" max="63" value="10" class="default-action">
                              <output name="rangeVal">10</output>
                              <div class="range-max">63</div>
                          </div>                          
                           <div class="input-group" id="debugging-group">
                              <label for="wsMode" title="Enable logging to websocket">LOG do Servidor</label>
                              <div class="switch">
                                  <input id="wsMode" type="checkbox">
                                  <label title="Output log to WS" class="slider" for="wsMode"></label>
                              </div>   
                           </div>           
                           <div class="input-group" id="debugging-group">
                              <label for="logMode" title="Enable logging to sd card">LOG do SD</label>
                              <div class="switch">
                                  <input id="logMode" type="checkbox" class="default-action">
                                  <label title="Output log to SD" class="slider" for="logMode"></label>
                              </div>   
                           </div>                           
                           <div class="input-group" id="dbg-group">
                              <label for="dbgVerbose">Detalhado</label>
                              <div class="switch">
                                  <input id="dbgVerbose" type="checkbox" class="default-action">
                                  <label title="Outputs additional information to log" class="slider" for="dbgVerbose"></label>
                              </div>
                          </div>
                          <div class="input-group" id="sfiles-group" style="display: grid;">
                            <label for="sfiles">Selecione a pasta / arquivo</label>                          
                            <select title="Select sd card file or folder" id="sfile" style="font-size: 11px;">
                              <option value="None" selected="selected">-- Selecione --</option>
                              <option value="/">Obter pastas</option>
                            </select>
                          </div>
                          <progress id="progressBar" value='0' max='100' class="default-action info"></progress>%
                          <section id="buttons"><br>
                            <button title="Download selected file from sd card" id="download" style="float:right; " value="1">Download</button>
                            <button title="Upload selected file/folder to ftp server" id="upload" style="float:left; " value="1">Copiar p/ FTP</button>
                            <button title="Upload selected file/folder and delete it from sd card on success" id="uploadMove" style="float:left; " value="1">Mover p/ FTP</button>
                            <button title="Delete selected file/folder from sd card" id="delete" style="float:right; " value="1">Apagar</button>
                          </section><br>
                          <div class="input-group" id="autoUpload-group">
                              <label for="autoUpload">Upload automático</label>
                              <div class="switch">
                                  <input id="autoUpload" type="checkbox" class="default-action">
                                  <label title="Automatic ftp upload on file creation" class="slider" for="autoUpload"></label>
                              </div>
                          </div>                              
                          <div class="input-group" id="micGain-group">
                              <label for="micGain">Ganho do microfone</label>
                              <div class="range-min">0</div>
                              <input title="Set microphone gain" type="range" id="micGain" min="0" max="10" value="0" class="default-action">
                              <output name="rangeVal">0</output>
                              <div class="range-max">10</div>
                          </div>                          
                          <div class="input-group" id="lamp-group">
                              <label for="enableMotion">Detectar movimento</label>
                              <div class="switch">
                                  <input id="enableMotion" type="checkbox" class="default-action">
                                  <label title="Enable/disable motion detection" class="slider" for="enableMotion"></label>
                              </div>
                           </div>
                          <div class="input-group" id="motion-group">
                              <label for="motion">Sensibilidade movimento</label>
                              <div class="range-min">1</div>
                              <input title="Set motion detection sensitivity" type="range" id="motion" min="1" max="10" value="7" class="default-action">
                              <output name="rangeVal">7</output>
                              <div class="range-max">10</div>
                          </div> 
                          <div class="input-group" id="minf-group">
                              <label for="minf">Min Segundos</label>
                              <div class="range-min">0</div>
                              <input title="Minimum number of frames to be captured or the file is deleted" type="range" id="minf" min="0" max="20" value="5" class="default-action">
                              <output name="rangeVal">5</output>
                              <div class="range-max">20</div>
                         </div>                     
                          <div class="input-group" id="record-group">
                              <label for="record">Salvar captura</label>
                              <div class="switch">
                                  <input id="record" type="checkbox" class="default-action">
                                  <label title="Enable recording on motion detection" class="slider" for="record"></label>
                              </div>
                          </div> <!--
                          <div class="input-group" id="dbgMotion-group">
                              <label for="dbgMotion">Show Motion</label>
                              <div class="switch">
                                  <input id="dbgMotion" type="checkbox" class="default-action">
                                  <label title="Display detected camera motion" class="slider" for="dbgMotion"></label>
                              </div>
                          </div>
                          <div class="input-group" id="lswitch-group">
                              <label for="lswitch">Night Switch</label>
                              <div class="range-min">0</div>
                              <input title="Set night switch sensitivity" type="range" id="lswitch" min="0" max="100" value="10" class="default-action">
                              <output name="rangeVal">10</output>
                              <div class="range-max">100</div>
                          </div> 
                          <div class="input-group" id="lamp-group">
                              <label for="lamp">Lamp</label>
                              <div class="switch">
                                  <input id="lamp" type="checkbox" class="default-action">
                                  <label title="Control onboard led" class="slider" for="lamp"></label>
                              </div>
                           </div> -->
                           <div class="input-group" id="lamp-group">
                              <label for="timeLapseOn">Time Lapse</label>
                              <div class="switch">
                                  <input id="timeLapseOn" type="checkbox" class="default-action">
                                  <label title="Enable time lapse recording" class="slider" for="timeLapseOn"></label>
                              </div>
                           </div>
                           <div class="input-group" id="CamTilt-group">
                              <label for="camTilt">Inclinação lente</label>
                              <div class="range-min">0</div>
                                  <input title="Set camera tilt angle" type="range" id="camTilt" min="0" max="180" value="90" class="default-action">
                              <output name="rangeVal">90</output>
                              <div class="range-max">180</div>
                          </div>
                          <div class="input-group" id="CamPan-group">
                              <label for="camPan">Lente panorâmica</label>
                              <div class="range-min">0</div>
                                  <input title="Set camera pan angle" type="range" id="camPan" min="0" max="180" value="90" class="default-action">
                              <output name="rangeVal">90</output>
                              <div class="range-max">180</div>
                          </div>
                          <div class="input-group extras" id="atemp-group">
                              <label for="atemp">Temperatura câmera</label>
                              &nbsp;<div id="atemp" class="default-action displayonly" name="textonly">&nbsp;</div>
                          </div>  
                       </div>
                     </nav>
                     <nav class="menu">                                                                
                        <input type="checkbox" id="settings-cb" class="menu-action">
                        <label for="settings-cb" class="nav-toggle">&#9776;&nbsp;&nbsp;Configurações da câmera&nbsp;&nbsp;</label>
                        <div>
                          <div class="input-group" id="brightness-group">
                              <label for="brightness">Brilho</label>
                              <div class="range-min">-2</div>
                              <input type="range" id="brightness" min="-2" max="2" value="0" class="default-action">
                              <output name="rangeVal">0</output>
                              <div class="range-max">2</div>
                          </div>
                          <div class="input-group" id="contrast-group">
                              <label for="contrast">Contraste</label>
                              <div class="range-min">-2</div>
                              <input type="range" id="contrast" min="-2" max="2" value="0" class="default-action">
                              <output name="rangeVal">0</output>
                              <div class="range-max">2</div>
                          </div>
                          <div class="input-group" id="saturation-group">
                              <label for="saturation">Saturação</label>
                              <div class="range-min">-2</div>
                              <input type="range" id="saturation" min="-2" max="2" value="0" class="default-action">
                              <output name="rangeVal">0</output>
                              <div class="range-max">2</div>
                          </div>
                          <div class="input-group" id="special_effect-group">
                              <label for="special_effect">Efeito</label>
                              <select id="special_effect" class="default-action">
                                  <option value="0" selected="selected">Sem efeito</option>
                                  <option value="1">Negativo</option>
                                  <option value="2">Escala cinza</option>
                                  <option value="3">Tinta vermelha</option>
                                  <option value="4">Tinta verde</option>
                                  <option value="5">Tinta azul</option>
                                  <option value="6">Sépia</option>
                              </select>
                          </div>
                          <div class="input-group" id="awb-group">
                              <label for="awb">AWB</label>
                              <div class="switch">
                                  <input id="awb" type="checkbox" class="default-action" checked="checked">
                                  <label class="slider" for="awb"></label>
                              </div>
                          </div>
                          <div class="input-group" id="awb_gain-group">
                              <label for="awb_gain">Ganho AWB</label>
                              <div class="switch">
                                  <input id="awb_gain" type="checkbox" class="default-action" checked="checked">
                                  <label class="slider" for="awb_gain"></label>
                              </div>
                          </div>
                          <div class="input-group" id="wb_mode-group">
                              <label for="wb_mode">Modo WB</label>
                              <select id="wb_mode" class="default-action">
                                  <option value="0" selected="selected">Automático</option>
                                  <option value="1">Ensolarado</option>
                                  <option value="2">Nublado</option>
                                  <option value="3">Escritório</option>
                                  <option value="4">Casa</option>
                              </select>
                          </div>
                          <div class="input-group" id="aec-group">
                              <label for="aec">Sensor AEC</label>
                              <div class="switch">
                                  <input id="aec" type="checkbox" class="default-action" checked="checked">
                                  <label class="slider" for="aec"></label>
                              </div>
                          </div>
                          <div class="input-group" id="aec2-group">
                              <label for="aec2">AEC DSP</label>
                              <div class="switch">
                                  <input id="aec2" type="checkbox" class="default-action" checked="checked">
                                  <label class="slider" for="aec2"></label>
                              </div>
                          </div>
                          <div class="input-group" id="ae_level-group">
                              <label for="ae_level">Nível AE</label>
                              <div class="range-min">-2</div>
                              <input type="range" id="ae_level" min="-2" max="2" value="0" class="default-action">
                              <output name="rangeVal">0</output>
                              <div class="range-max">2</div>
                          </div>
                          <div class="input-group" id="aec_value-group">
                              <label for="aec_value">Exposição</label>
                              <div class="range-min">0</div>
                              <input type="range" id="aec_value" min="0" max="1200" value="204" class="default-action">
                              <output name="rangeVal">204</output>
                              <div class="range-max">1200</div>
                          </div>
                          <div class="input-group" id="agc-group">
                              <label for="agc">AGC</label>
                              <div class="switch">
                                  <input id="agc" type="checkbox" class="default-action" checked="checked">
                                  <label class="slider" for="agc"></label>
                              </div>
                          </div>
                          <div class="input-group hidden" id="agc_gain-group">
                              <label for="agc_gain">Ganho</label>
                              <div class="range-min">1x</div>
                              <input type="range" id="agc_gain" min="0" max="30" value="5" class="default-action">
                              <output name="rangeVal">5</output>
                              <div class="range-max">31x</div>
                          </div>
                          <div class="input-group" id="gainceiling-group">
                              <label for="gainceiling">Ganho máximo</label>
                              <div class="range-min">2x</div>
                              <input type="range" id="gainceiling" min="0" max="6" value="0" class="default-action">
                              <output name="rangeVal">0</output>
                              <div class="range-max">128x</div>
                          </div>
                          <div class="input-group" id="bpc-group">
                              <label for="bpc">BPC</label>
                              <div class="switch">
                                  <input id="bpc" type="checkbox" class="default-action">
                                  <label class="slider" for="bpc"></label>
                              </div>
                          </div>
                          <div class="input-group" id="wpc-group">
                              <label for="wpc">WPC</label>
                              <div class="switch">
                                  <input id="wpc" type="checkbox" class="default-action" checked="checked">
                                  <label class="slider" for="wpc"></label>
                              </div>
                          </div>
                          <div class="input-group" id="raw_gma-group">
                              <label for="raw_gma">GMA bruto</label>
                              <div class="switch">
                                  <input id="raw_gma" type="checkbox" class="default-action" checked="checked">
                                  <label class="slider" for="raw_gma"></label>
                              </div>
                          </div>
                          <div class="input-group" id="lenc-group">
                              <label for="lenc">Correção de lente</label>
                              <div class="switch">
                                  <input id="lenc" type="checkbox" class="default-action" checked="checked">
                                  <label class="slider" for="lenc"></label>
                              </div>
                          </div>
                          <div class="input-group" id="hmirror-group">
                              <label for="hmirror">Espelhar H</label>
                              <div class="switch">
                                  <input id="hmirror" type="checkbox" class="default-action" checked="checked">
                                  <label class="slider" for="hmirror"></label>
                              </div>
                          </div>
                          <div class="input-group" id="vflip-group">
                              <label for="vflip">Espelhar Vp</label>
                              <div class="switch">
                                  <input id="vflip" type="checkbox" class="default-action" checked="checked">
                                  <label class="slider" for="vflip"></label>
                              </div>
                          </div>
                          <div class="input-group" id="dcw-group">
                              <label for="dcw">DCW (Reduzir EN)</label>
                              <div class="switch">
                                  <input id="dcw" type="checkbox" class="default-action" checked="checked">
                                  <label class="slider" for="dcw"></label>
                              </div>
                          </div>
                          <div class="input-group" id="colorbar-group">
                              <label for="colorbar">Barra de cor</label>
                              <div class="switch">
                                  <input id="colorbar" type="checkbox" class="default-action">
                                  <label class="slider" for="colorbar"></label>
                              </div>
                          </div>                                                
                        </div>            
                    </nav>
                    <nav class="menu">
                        <input type="checkbox" id="other-cb" class="menu-action">
                        <label for="other-cb" class="nav-toggle">&#9776;&nbsp;&nbsp;Outras configurações&nbsp;&nbsp;</label>
                        <div>
                          <h3>Configurações de rede</h3>
                          <div class="input-group" id="wifi-group">
                              <label for "hostName">Host</label>
                              <input id="hostName" name="hostName" length=32 placeholder="Host name" class="default-action">
                          </div>
                          <div class="input-group" id="wifi-group">
                              <label for "ST_SSID">SSID</label>
                              <input id="ST_SSID" name="ST_SSID" length=32 placeholder="SSID" class="default-action">
                          </div>
                          <div class="input-group" id="wifi-group">
                              <label for="ST_Pass">Senha</label>
                              <input id="ST_Pass" name="ST_Pass" length=64 placeholder="Router password" class="default-action">
                          </div>
                          <h3>Configurações de Hora</h3>
                          <div class="input-group" id="time-group">
                             <label for="timezone">Fuso horário</label>
                             <input id="timezone" name="timezone" length=64 placeholder="Time zone string" class="default-action">
                          </div>
                          <div class="input-group" id="time-group">
                             <label for="timezoneSel">Seleção</label>
                             <select id="timezoneSel" name="timezoneSel">
                                <option value="" selected>&nbsp;-- Select --</option>
                                <option value="EET-2EEST-3,M3.5.0/03:00:00,M10.5.0/04:00:00">Europa/Athens</option>
                                <option value="GMT0BST,M3.5.0/01,M10.5.0/02">Europa/Belfast</option>
                                <option value="CET-1CEST,M3.5.0,M10.5.0/3">Europa/Berlin</option>
                                <option value="GMT0BST,M3.5.0/1,M10.5.0">Europa/London</option>
                                <option value="CET-1CEST,M3.5.0,M10.5.0/3">Europa/Paris</option>
                                <option value="CET-1CEST,M3.5.0,M10.5.0/3">Europa/Rome</option>
                                <option value="CET-1CEST,M3.5.0,M10.5.0/3">Europa/Zurich</option>
                                <option value="Etc/GMT-12">GMT-12:00</option>
                                <option value="Etc/GMT-11">GMT-11:00</option>
                                <option value="Etc/GMT-10">GMT-10:00</option>
                                <option value="Etc/GMT-9">GMT-9:00</option>
                                <option value="Etc/GMT-8">GMT-8:00</option>
                                <option value="Etc/GMT-7">GMT-7:00</option>
                                <option value="Etc/GMT-6">GMT-6:00</option>
                                <option value="Etc/GMT-5">GMT-5:00</option>
                                <option value="Etc/GMT-4">GMT-4:00</option>
                                <option value="Etc/GMT-3">GMT-3:00</option>
                                <option value="Etc/GMT-2">GMT-2:00</option>
                                <option value="Etc/GMT-1">GMT-1:00</option>
                                <option value="Etc/GMT+0">GMT+0:00</option>
                                <option value="Etc/GMT-1">GMT+1:00</option>
                                <option value="Etc/GMT-2">GMT+2:00</option>
                                <option value="Etc/GMT-3">GMT+3:00</option>
                                <option value="Etc/GMT-4">GMT+4:00</option>
                                <option value="Etc/GMT-5">GMT+5:00</option>
                                <option value="Etc/GMT-6">GMT+6:00</option>
                                <option value="Etc/GMT-7">GMT+7:00</option>
                                <option value="Etc/GMT-8">GMT+8:00</option>
                                <option value="Etc/GMT-9">GMT+9:00</option>
                                <option value="Etc/GMT-10">GMT+10:00</option>
                                <option value="Etc/GMT-11">GMT+11:00</option>
                                <option value="Etc/GMT-12">GMT+12:00</option>                                
                             </select>
                          </div>
                          <div class="input-group extras" id="time-group">
                              <label for="clockUTC">Câmera UTC</label>
                              <input id="clockUTC" name="clockUTC" length=20 style="max-width:124px" class="default-action">
                          </div>                          
                          <h3>Configurações de FTP</h3>
                          <div class="input-group" id="ftp-group">
                              <label for "ftp_server">Servidor</label>
                              <input id="ftp_server" name="ftp_server" length=32 placeholder="Nome do servidor" class="default-action">
                          </div>
                          <div class="input-group" id="ftp-group">
                              <label for "ftp_port">Porta</label>
                              <input id="ftp_port" name="ftp_port" length=6 placeholder="Porta FTP" class="default-action">
                          </div>                          
                          <div class="input-group" id="ftp-group">
                              <label for="ftp_user">Usuário</label>
                              <input id="ftp_user" name="ftp_user" length=32 placeholder="Usuário FTP" class="default-action">
                          </div>
                          <div class="input-group" id="ftp-group">
                              <label for="ftp_pass">Senha</label>
                              <input id="ftp_pass" name="ftp_pass" length=32 placeholder="Senha FTP" class="default-action">
                          </div>
                          <div class="input-group" id="ftp-group">
                              <label for="ftp_wd">Diretório</label>
                              <input id="ftp_wd" name="ftp_wd" length=64 placeholder="Diretório FTP" class="default-action">
                          </div>                          
                          <br>
                          <h3>Configurações de SMTP</h3>
                          <div class="input-group" id="smtp-group">
                              <label for "smtp_server">Servidor</label>
                              <input id="smtp_server" name="smtp_server" length=32 placeholder="Servidor SMTP" class="default-action">
                          </div>
                          <div class="input-group" id="smtp-group">
                              <label for "smtp_port">Porta</label>
                              <input id="smtp_port" name="smtp_port" length=6 placeholder="Porta SMTP" class="default-action">
                          </div>                          
                          <div class="input-group" id="smtp-group">
                              <label for="smtp_login">Login</label>
                              <input id="smtp_login" name="smtp_login" length=32 placeholder="Login SMTP" class="default-action">
                          </div>
                          <div class="input-group" id="smtp-group">
                              <label for="smtp_pass">Senha</label>
                              <input id="smtp_pass" name="smtp_pass" length=32 placeholder="Senha SMTP" class="default-action">
                          </div>
                          <div class="input-group" id="smtp-group">
                              <label for="smtp_email">E-mail</label>
                              <input id="smtp_email" name="smtp_email" length=64 placeholder="E-mail para" class="default-action">
                          </div>                          
                          <br>
                          <h3>Configurações de autenticação</h3>
                          <div class="input-group" id="auth-group">
                              <label for="Auth_User">Login</label>
                              <input id="Auth_User" name="Auth_User" length=32 placeholder="Usuário" class="default-action">
                          </div>
                          <div class="input-group" id="auth-group">
                              <label for="Auth_Pass">Senha</label>
                              <input id="Auth_Pass" name="Auth_Pass" length=32 placeholder="Senha" class="default-action">
                          </div>                         
                          <br>
                          <div>
                            <section id="buttons">
                              <button id="reboot" style="float:right;">Reiniciar</button>
                              <button id="save" style="float:right;">Salvar</button>
                              <!-- <button id="format" style="float:right;">Format</button> -->
                            </section>
                          </div>   
                        </div>
                   </nav>
                </div>
                <figure>
                    <div id="stream-container" class="image-container hidden">
                        <div class="close" id="close-stream">×</div>
                        <div class="maximize" id="full-screen">+</div>
                        <img id="stream" src="">
                    </div>
                </figure>
            </div>
            <section id="footer">
                <div class="info-group center" id="llevel-group">
                    <label for="llevel">Luz&nbsp;Ambiente</label>
                    <div id="llevel" class="default-action info displayonly">&nbsp;</div>
                </div>
                <div class="info-group center" id="night-group">
                    <label for="night">Periodo&nbsp;noturno</label>
                    <div id="night" class="default-action info displayonly" name="textonly">&nbsp;</div>
                </div>
                <div class="info-group center" id="atemp-group">
                    <label for="atemp">Tempo&nbsp;ligado</label>
                    <div id="atemp" class="default-action info displayonly" name="textonly">&nbsp;</div>
                </div> 
                <div class="info-group center" id="batt-group">
                    <label for="battv">Voltagem&nbsp;bateria</label>
                    <div id="battv" class="default-action info displayonly" name="textonly">&nbsp;</div>
                </div> 
                <div class="info-group center" id="clock-group">
                    <label for="clock">Hora&nbsp;local</label>
                    <div id="clock" class="default-action info displayonly" name="textonly">&nbsp;</div>
                </div>
                <div class="info-group center" id="uptime-group">
                    <label for="up_time">Tempo&nbsp;ativo</label>
                    <div id="up_time" class="default-action info displayonly" name="textonly">&nbsp;</div>
                </div>                                                 
                <div class="info-group center" id="rssi-group">
                    <label for="wifi_rssi">Nível&nbsp;sinal</label>
                    <div id="wifi_rssi" class="default-action info displayonly" name="textonly">&nbsp;</div>
                </div>
                <div class="info-group center" id="heap-group">
                    <label for="free_heap">Pilha&nbsp;</label>
                    <div id="free_heap" class="default-action info displayonly" name="textonly">&nbsp;</div>
                </div>  
                <div class="info-group center" id="heap-group">
                    <label for="free_psram">PSRAM&nbsp;livre</label>
                    <div id="free_psram" class="default-action info displayonly" name="textonly">&nbsp;</div>
                </div>                 
                <div class="info-group center" id="total-group">
                    <label for="total_bytes">Espaço&nbsp;total</label>
                    <div id="total_bytes" class="default-action info displayonly" name="textonly">&nbsp;</div>
                </div>                
                <div class="info-group center" id="used-group">
                    <label for="used_bytes">Espaço&nbsp;usado</label>
                    <div id="used_bytes" class="default-action info displayonly" name="textonly">&nbsp;</div>
                </div>
                <div class="info-group center" id="free-group">
                    <label for="free_bytes">Espaço&nbsp;livre</label>
                    <div id="free_bytes" class="default-action info displayonly" name="textonly">&nbsp;</div>
                </div>   
            </section>                         
        </section> 
    </div>
    
    <div id="MostrarLOG" class="tabcontent">
      <br/>
      <div class="grid-cols2">
        <div>
          <svg width="150" height="40">
            <rect/>
            <text id="clearWSlog" x="50%" y="50%" font-size="20" fill="black">Limpar LOG</text>
          </svg>
        </div>
        <div>
          &nbsp;
        </div>
      </div>
      <pre id='applog' style="height:50vh;"></pre>
      </br/>
      <div class="grid-cols2">
        <div>
          <svg width="150" height="40">
            <rect/>
            <text id="clearSDlog" x="50%" y="50%" font-size="20" fill="black">Limpar LOG</text>
          </svg>
        </div>
        <div>
          <svg width="150" height="40">
            <rect/>
            <text id="refreshSDlog" x="50%" y="50%" font-size="20" fill="black">Recuperar LOG</text>
          </svg>
        </div>
      </div>
      <pre id='sdlog' style="height:50vh;"></pre>
    </div>
    <div id="Configuração" class="tabcontent">
      <h2>Controle</h2>
      <div class="grid-cols4">
        <div>
          <svg width="120" height="40">
            <rect/>
            <text id="save" x="50%" y="50%" font-size="20" fill="black">Savar</text>
          </svg>
        </div>
        <div>
          <svg width="120" height="40">
            <rect/>
            <text id="reset" x="50%" y="50%"font-size="20" fill="black">Reiniciar</text>
          </svg>
        </div>
        <div>
          <svg width="120" height="40">
            <rect/>
            <text id="deldata" x="50%" y="50%" font-size="25" fill="black">Recarregar</text>
          </svg>
        </div>
        <div>
          <svg width="120" height="40">
            <rect/>
            <text id="clear" x="50%" y="50%" font-size="20" fill="black">Limpar NVS</text>
          </svg>
        </div>
        <div class="cfgTitle">
          <br/>
          <h2>Configurações</h2>
          <h3>Pressione um botão para visualizar ou modificar as configurações (os valores alterados não são validados)</h3>
          <h3>Pressione o botão Salvar para tornar as alterações permanentes</h3>
        </div>
        <div>
          <svg width="120" height="40">
            <rect/>
            <text id="wifi" x="50%" y="50%" font-size="20" fill="black">Wi-Fi</text>
          </svg>
        </div>
        <div>
          <svg width="120" height="40">
            <rect/>
            <text id="motion" x="50%" y="50%" font-size="20" fill="black">Movimento</text>
          </svg>
        </div>
		<!--
        <div>
          <svg width="120" height="40">
            <rect/>
            <text id="peripherals" x="50%" y="50%" font-size="20" fill="black">Periféricos</text>
          </svg>
        </div>
        <div>
		-->
          <svg width="120" height="40">
            <rect/>
            <text id="other" x="50%" y="50%" font-size="20" fill="black">Outros</text>
          </svg>
        </div>
      </div>
      <div class="configGroup">
        <p id='configTable'></p>
      </div>
    </div>
           
    <div id="Atualizar" class="tabcontent">
      <br></br>
      <form id="upload_form" enctype="multipart/form-data" method="post">
        <input type="file" name="file1" id="file1" style="background-color:white" onchange="uploadFile()"><br>
        <br></br>
        <progress id="progressOta" value="0" max="100" style="width:300px;"></progress>
        <h3 id="status"></h3>
        <p id="loaded_n_total"></p>
      </form>
    </div>        
  <script>
//Menu acordeão
$('.menu-action').each(function () {
  this.addEventListener('click', function(e) {    
    var clickedID = $(this).prop('id')
    $('.menu-action').each(function () {
      if(clickedID != $(this).prop('id')) this.checked=false;
    });
  }); 
});


$('input[type="range"]').on('input', function () {

  var control = $(this),
  controlMin = control.attr('min'),
  controlMax = control.attr('max'),
  controlVal = control.val();

  var range = controlMax - controlMin;
  var position = (controlVal - controlMin) / range * 30;
  
  var output = control.next('output');
  output.
  css('left', 'calc(' + position + '%)').text(controlVal);
  
});

const baseHost = document.location.origin

document.addEventListener('DOMContentLoaded', function (event) {

  setListeners();

  var streamUrl = baseHost + ':81'
  var timer = null;                  
  var refreshVal = 5000;

  const hide = el => {
    el.classList.add('hidden')
  }
  const show = el => {
    el.classList.remove('hidden')
  }

  const disable = el => {
    el.classList.add('disabled')
    el.disabled = true
  }

  const enable = el => {
    el.classList.remove('disabled')
    el.disabled = false
  }

  const updateValue = (el, value, updateRemote) => {
    updateRemote = updateRemote == null ? true : updateRemote    
    let initialValue
    if (el.type === 'checkbox') {
      initialValue = el.checked
      value = !!Number(value);
      el.checked = value
    }else if (el.type === 'range') {
        initialValue = el.value
        el.value = value          
        el.parentElement.children.rangeVal.value = value
    } else {
      if (el.classList.contains('displayonly')) {
        el.innerHTML = value       
      } else {
        initialValue = el.value
        el.value = value
      }
    }

    if (updateRemote && initialValue !== value) {
      updateConfig(el);
    } else if(!updateRemote){
      if(el.id === "aec"){
        value ? hide(exposure) : show(exposure)
      } else if(el.id === "agc"){
        if (value) {
          show(gainCeiling)
          hide(agcGain)
        } else {
          hide(gainCeiling)
          show(agcGain)
        }
      } else if(el.id === "forceRecord"){ 
          if(value){
            document.getElementById("forceRecord").innerHTML='Parar'
            document.getElementById("forceRecord").classList.add("blinking")
          }else{
            document.getElementById("forceRecord").innerHTML='Gravar'          
            document.getElementById("forceRecord").classList.remove("blinking")
          }
      } else if(el.id === "clockUTC"){        
        var uClock = new Date(value.replace(" ","T"));
        var now = new Date();
        var nowUTC = now.getTime() + now.getTimezoneOffset() * 60000;
        var timeDiff = Math.abs(nowUTC - uClock.getTime());        
        console.log("Agora: " + now.toISOString() + " navegador: " + uClock.toISOString() + " Diferença de hora local para o navegador: " + timeDiff/100 +" segundo");
        if(timeDiff > 2000){ //2 segundo
          now = new Date();
          var value = new Date(now.getTime() - now.getTimezoneOffset() * 60000).toISOString();
          console.log("Sincronizar com o tempo: " + value );
          const query = `${baseHost}/control?clockUTC=${value}`
          fetch(query)
            .then(response => {
              console.log(`request to ${query} finished, status: ${response.status}`)
          })
        }      
      } else if(el.id === "fw_version"){    
        document.getElementById("fw_version").innerHTML = "ver: " + value;
      } else if(el.id === "hostName"){
        document.title = value;
        document.getElementById("page-title").innerHTML = value;
      } else if(el.id === "awb_gain"){
        value ? show(wb) : hide(wb)
      }
    }
  }
  
  function handleErrors(response) {
    if (!response.ok) {
      alert(response.statusText);
    }
    return response;
  }

  function updateConfig (el) {
    let value
    switch (el.type) {
      case 'checkbox':
        value = el.checked ? 1 : 0
        break
      case 'range':
      case 'select-one':
        value = el.value
        break
      case 'button':
      case 'submit':
        if(el.value!="1"){ //Excluir pasta ou arquivo, ou carregar ou mover por ftp
          value = el.value;        
        }else{
          value = '1'
        }
        break
      case 'text':
        value = el.value
        break
      default:
        return
    }
    
    const query = `${baseHost}/control?${el.id}=${value}`
    const encoded = encodeURI(query);
    //console.log(`Encoded request ${query}`)
    fetch(encoded)
      .then(handleErrors)
      .then(response => {
        console.log(`request to ${query} finished, status: ${response.status}`)
    })
  }

  document
    .querySelectorAll('.close')
    .forEach(el => {
      el.onclick = () => {
        hide(el.parentNode)
      }
    })
    
  refresh_status();
  if(timer == null){
    setTimeout(refresh_status_quick,refreshVal);
  } 
   
  function refresh_status_quick() {
    // ler valores iniciais
    clearTimeout(timer);
    timer = null;
    fetch(`${baseHost}/status?q`)
      .then(function (response) {     
        return response.json()
      })
      .then(function (state) {
        document
          .querySelectorAll('#footer .default-action, #clockUTC')
          .forEach(el => {
            updateValue(el, state[el.id], false)
          })
          if(state['isrecord']=='Yes' && document.getElementById("forceRecord").innerHTML=='Gravar')  updateValue(document.getElementById('forceRecord'), 1, false)
          if(state['isrecord']=='No' && document.getElementById("forceRecord").innerHTML=='Parar')  updateValue(document.getElementById('forceRecord'), 0, false)
          refreshVal = state['refreshVal'];
          timer = setTimeout(refresh_status_quick, refreshVal);
          document.getElementById('progressBar').value = state['progressBar'];
      })
      .catch((e) => {
        console.log('Error: ', e);
        timer = setTimeout(refresh_status_quick, refreshVal);
      });
  }


  function refresh_status() {
  // ler valores iniciais
  fetch(`${baseHost}/status?`)
    .then(function (response) {
      return response.json()
    })
    .then(function (state) {
      document
        .querySelectorAll('.default-action')
        .forEach(el => {
          updateValue(el, state[el.id], false)
        })
     })
     .catch((e) => {
        console.error('Error: ', e);
      });
  }

  const view = document.getElementById('stream')
  const viewContainer = document.getElementById('stream-container')
  const forceRecord = document.getElementById('forceRecord')
  const stillButton = document.getElementById('get-still')
  const streamButton = document.getElementById('toggle-stream')
  const closeButton = document.getElementById('close-stream')  
  const fullScreen= document.getElementById('full-screen') 
  const uploadButton = document.getElementById('upload')    
  const uploadMoveButton = document.getElementById('uploadMove')    
  const downloadButton = document.getElementById('download') 
  const deleteButton = document.getElementById('delete') 
  const rebootButton = document.getElementById('reboot')
  const saveButton = document.getElementById('save')
  //const formatButton = document.getElementById('format')
  
  uploadButton.onclick = () => {
    updateConfig(uploadButton);
  }
  uploadMoveButton.onclick = () => {
    updateConfig(uploadMoveButton);
  }  
  downloadButton.onclick = () => {
    var downloadBtVal = $('#download').val();    
    if (downloadBtVal != downloadBtVal.split('.')) window.location.href='/control?download=1';    
  }

  deleteButton.onclick = () => {
    var deleteBt = $('#delete');
    if(!confirm("Tem certeza de que deseja excluir " + deleteBt.val() + " do cartão SD?"))
      return false;
      
    updateConfig(deleteButton);
    
    var sid = $('#sfile');
    sid.find('option:not(:first)').remove(); // remover tudo, exceto a primeira opção
    sid.append('<option value="/">Obter pastas</option>'); 
  }

  rebootButton.onclick = () => {
    stopStream();
    $.ajax({
      url: baseHost + '/control',
      data: {
        "reset" : "1"
      }
    })
    setTimeout(function () { location.reload(true); }, 10000);
  }
 
 saveButton.onclick = () => {
    const bPlaying = (streamButton.innerHTML == 'Parar câmera')
    if(bPlaying){
      stopStream();
    }
    $.ajax({
      url: baseHost + '/control',
      data: {
        "save" : "1"
      },
      success: function(response) {
        if(bPlaying) startStream()
      }
    })
  }
  
	var srcSize = { width: 0, height: 0 };
  const stopStream = () => {
    window.stop();
//    $("#stream-container").css("width",srcSize.width);
//    $("#stream-container").css("height", srcSize.height);
//    $("#stream").css("width", srcSize.width);
//    $("#stream").css("height", srcSize.height);
    streamButton.innerHTML = 'Ver câmera'
    $.ajax({
      url: baseHost + '/control',
      data: {
        "stopStream": "1"
      }
    })
  }

  const startStream = () => {
    show(viewContainer)
    view.src = `${streamUrl}/stream`
		
    streamButton.innerHTML = 'Parar câmera'
  }
  view.onload = function () {srcSize = { width: view.width, height: view.height } };

  forceRecord.onclick = () => {    
    var recOn = 0;
    if(forceRecord.innerHTML == 'Gravar'){
      forceRecord.classList.add("blinking")
      forceRecord.innerHTML='Parar'
      var recOn = 1;
    }else{
      forceRecord.classList.remove("blinking")
      forceRecord.innerHTML='Gravar'
      var recOn = 0;
    }
    
    $.ajax({
      url: baseHost + '/control',
      data: {
        "forceRecord": recOn
      }
    })
    
  }  

  stillButton.onclick = () => {
    stopStream()
    view.src = `${streamUrl}/stream?random=${Date.now()}`
    show(viewContainer)
  }
  closeButton.onclick = (e) => {
    stopStream()
    hide(viewContainer)
    e.stopPropagation();
    //Sair da tela cheia
    if(fullScreen.innerHTML === '-' || fullScreen.innerHTML === '#'){
      toggleFullScreen()
    }
  }

  streamButton.onclick = () => {
    const streamEnabled = streamButton.innerHTML === 'Parar câmera'
    if (streamEnabled) {
      stopStream()
    } else {
      startStream()
    }
  }
  
  function calculateAspectRatioFit(srcWidth, srcHeight, maxWidth, maxHeight) {
    var ratio = Math.min(maxWidth / srcWidth, maxHeight / srcHeight);
    return { width: srcWidth*ratio, height: srcHeight*ratio };
  }
  
  //Maximizar - Minimizar a janela do player 
  function toggleFullScreen(){        
   if (fullScreen.innerHTML === '+') {     //Maximizar
      srcSize = { width: $("#stream-container").width(), height: $("#stream-container").height() }
      viewContainer.requestFullscreen()
      fullScreen.innerHTML = '#' 
      $("#stream-container").css("width", window.screen.availWidth);
      $("#stream-container").css("height", window.screen.availHeight);
      $("#stream").css("width", $("#stream-container").width());
      $("#stream").css("height", $("#stream-container").height());      
      //console.log("Max",window.screen.availWidth,window.screen.availHeight);
   }else  if (fullScreen.innerHTML === '-') {     //Maximizado
      document.exitFullscreen()
      fullScreen.innerHTML = '+'
      $("#stream-container").css("width", "auto");
      $("#stream-container").css("height", "auto");   
      $("#stream").css("width", "100%");
      $("#stream").css("height", "auto");  
    }else{ //Maximize com proporção
      fullScreen.innerHTML = '-' 
      var r = calculateAspectRatioFit(srcSize.width,srcSize.height, window.screen.availWidth, window.screen.availHeight)
      $("#stream-container").css("width",r.width);
      $("#stream-container").css("height", r.height);
      $("#stream").css("width", r.width);
      $("#stream").css("height", r.height);      
      //console.log("Max asp",srcSize,r);
    }

}

 //Maximizar - Minimize o vídeo ao clicar
  viewContainer.onclick = () => {
     toggleFullScreen()
  }
  //Maximizar - Minimizar ao clicar no botão
  fullScreen.onclick = (e) => {
    e.stopPropagation();
    console.log("fullScreen click")
    toggleFullScreen()
  }
  
  // Anexar padrão na ação de alteração
  document
    .querySelectorAll('.default-action')
    .forEach(el => {
      el.onchange = () => updateConfig(el)
    })

  // Ações personalizadas
  //Seleção de fuso horário
  const timezoneSel = document.getElementById('timezoneSel')
  timezoneSel.onchange = () => {
    var tz = document.getElementById('timezone');
    if(timezoneSel.options[timezoneSel.selectedIndex].value!=''){
      tz.value = timezoneSel.options[timezoneSel.selectedIndex].value;    
      updateConfig(tz)
    }
  }
  
  // Ganho
  const agc = document.getElementById('agc')
  const agcGain = document.getElementById('agc_gain-group')
  const gainCeiling = document.getElementById('gainceiling-group')
  agc.onchange = () => {
    updateConfig(agc)
    if (agc.checked) {
      show(gainCeiling)
      hide(agcGain)
    } else {
      hide(gainCeiling)
      show(agcGain)
    }
  }

  // Exposição
  const aec = document.getElementById('aec')
  const exposure = document.getElementById('aec_value-group')
  aec.onchange = () => {
    updateConfig(aec)
    aec.checked ? hide(exposure) : show(exposure)
  }

  // AWB
  const awb = document.getElementById('awb_gain')
  const wb = document.getElementById('wb_mode-group')
  awb.onchange = () => {
    updateConfig(awb)
    awb.checked ? show(wb) : hide(wb)
  }

  // Modo de registro
  const logMode = document.getElementById('logMode')
  logMode.onchange = () => { 
    let lm = logMode.checked ? 1 : 0;
    $.ajax({
      url: baseHost + '/control',
      data: {
        "logMode": lm
      },   
    }); 
  }

  // framesize
  const framesize = document.getElementById('framesize')
  framesize.onchange = () => {
    updateConfig(framesize)
    updateFPS()
  }

  function updateFPS() {
    // atualize o FPS padrão para corresponder ao tamanho do quadro selecionado
    $.ajax({
      url: baseHost + '/control',
      data: {
        "updateFPS": $('#framesize').val()
      }, 
      success: function(response) {
        // update FPS
        $.each(response, function(key, value){
           $('#'+key).val(value); // fps
        });
      }
    }); 
  }

  // lista de opções de pasta/arquivo
  const sfile = document.getElementById('sfile');
  sfile.onchange = () => {
    // lista de opções de compilação do json
    var sid = $('#sfile');
    var selection = sid.val();    
    $("*").css("cursor", "wait");
    document.getElementById('download').value = selection; //Armazenar o caminho do arquivo para download
    document.getElementById('delete').value = selection; //Armazenar o caminho do arquivo para exclusão
    document.getElementById('upload').value = selection; //Armazenar o caminho do arquivo para upload de ftp
    document.getElementById('uploadMove').value = selection; //Armazenar o caminho do arquivo para mover o upload do ftp
    var listItems = '';
    //Not a file list
    var pathDir = selection.substring(0,selection.lastIndexOf("/"))
    if(pathDir=="") sid.find('option:not(:first)').remove(); // remover tudo, exceto a primeira opção
    $.ajax({
      url: baseHost + '/control',
      data: {
        "sfile": selection
      },   
      success: function(response) {
        // create new option list from json
        $.each(response, function(key, value){
          listItems += '<option value="' + key + '">' + value + '</option>';
        });
        sid.append(listItems); // pequeno bug - continua anexando Get Folders cada vez que o arquivo é selecionado na mesma pasta
        $("*").css("cursor", "default");
      },
      error: function (xhr, ajaxOptions, thrownError) {
        $("*").css("cursor", "default");
        console.log(xhr.status);
      }         
    }); 
  }
});


      /*********** gerenciamento de guias ***********/

      const wsServer = "ws://" + document.location.host + ":80/ws";
      let ws;
      let cfgGroupNow = -1;
      const _ = document.querySelector.bind(document);
      const __ = document.querySelectorAll.bind(document);
      
      /*********** funções de websocket ***********/
      
      // define websocket handling
      function initWebSocket() {
        addLogLine("Conectado a: " + wsServer);
        ws = new WebSocket(wsServer);
        ws.onopen = onWSopen;
        ws.onclose = onWSclose;
        ws.onmessage = onWSmessage; 
      }
      
      // connect to websocket server
      function onWSopen(event) {
        addLogLine("Conectado");
      }
      
      // process received message
      function onWSmessage(messageEvent) {
        addLogLine(messageEvent.data);
      }
      
      function onWSclose(event) {
        addLogLine("Disconectado");
      }
      
      /*********** funções de layout de página ***********/
    
      function openTab(evt, tabName) {
        // control tab viewing
        __('.tabcontent').forEach(el => {el.style.display = "none";});
        _('#' + tabName).style.display = "block";
        __('.tablinks').forEach(el => {el.classList.remove("active");});
        evt.classList.add("active");
      }

      function accordian(accId) {
        // accordian buttons to show / hide elements
        let panel = _('#' + accId);
        if (panel.style.display === "block") panel.style.display = "none";
        else panel.style.display = "block";
      }
      
      // add received line to log element
      function addLogLine(text) {
        let log = document.getElementById('applog');
        let new_node = document.createTextNode(text + "\n");
        log.append(new_node);
      }
      
      function setListeners() {
        // add event listener for change events
        document.addEventListener("change", function (event) {
          // config input fields 
          if (event.target.classList.contains('configItem')) { 
            fetch(baseHost + encodeURI('/control?' + event.target.name + '=' + event.target.value));
          }
          if (event.target.id == ('wsMode')) { 
            if (event.target.checked) initWebSocket();
            else ws.close();
          }
        });
        
        // add event listener for rect click events
        document.addEventListener("click", function (event) {
          // svg rect elements, use id of its following text node
          if (event.target.nodeName == 'rect') processStatus(event.target.nextElementSibling.id);
          // tab buttons, use button text without spaces as tab id
          if (event.target.classList.contains('tablinks')) openTab(event.target, event.target.innerHTML.replaceAll(' ', ''));
        });
      }
      
      /*********** Funções de configuração ***********/
      
      function processStatus(key) {
        if (key == "wifi") getConfig("0");
        else if (key == "motion") getConfig("01");
        else if (key == "peripherals") getConfig("0123");
        else if (key == "other") getConfig("012");
        else if (key == "save") fetch(baseHost + encodeURI('/control?' + key + '=1'));
        else if (key == "reset") fetch(baseHost + encodeURI('/control?' + key + '=1'));
        else if (key == "deldata") fetch(baseHost + encodeURI('/control?' + key + '=1'));
        else if (key == "clear") fetch(baseHost + encodeURI('/control?' + key + '=1'));
        else if (key == "clearWSlog") _('#applog').innerHTML = "";
        else if (key == "clearSDlog") clearSDlog();
        else if (key == "refreshSDlog") getSDlog();
      }
      
      async function getConfig(cfgGroup) {
        // request config json for selected group
        const response = await fetch('/status?123456789' + cfgGroup);
        if (response.ok) {
          const configData = await response.json();
          // format received json into html table
          buildTable(configData, cfgGroup);
        } else console.log(response.status); 
      }
      
      function buildTable(configData, cfgGroup) {
        // dynamically build table of editable settings
        const divShowData = document.getElementById('configTable');
        divShowData.innerHTML = "";
        if (cfgGroupNow != cfgGroup) {
          cfgGroupNow = cfgGroup;
          const table = document.createElement("table"); 
          // Create table header row from heading names
          const colHeaders = ['Nome da configuração', 'Valor']; 
          let tr = table.insertRow(-1); 
          for (let i = 0; i < colHeaders.length; i++) {
            let th = document.createElement("th");    
            th.innerHTML = colHeaders[i];
            tr.appendChild(th);
          }

          // add each setting as a row containing setting name and setting value
          let newRow = 1;
          Object.keys(configData).forEach( key => {
            if (newRow) tr = table.insertRow(-1);
            let tabCell = tr.insertCell(-1);
            if (newRow) {
              tabCell.innerHTML = configData[key]; // name of setting
              newRow = 0;
            } else {
              // input field for value of setting
              tabCell.innerHTML = '<input type="text" class="configItem" name="' + key + '" value="' + configData[key] +'">'; 
              newRow = 1;
            }
          })
          // add the newly created table at placeholder
          divShowData.appendChild(table);
        } else cfgGroupNow = -1;
      }
      
      function clearSDlog() {
        if (window.confirm('Isso excluirá todos os log no SD. Tem certeza?')) { 
          _('#sdlog').innerHTML = "";
          fetch(baseHost + encodeURI('/control?resetLog=1'));
        }
      }
      
      async function getSDlog() {
        // request SD log file
        const response = await fetch('/web?log.txt');
        if (response.ok) {
          const logData = await response.text();
        _('#sdlog').innerHTML = logData; 
        } else console.log(response.status); 
      }

      /*********** OTA ***********/
       
      async function uploadFile() {
        // notify server to start ota task
        const response = await fetch('/control?startOTA=1');
        if (response.ok) {
          // submit file for uploading
          let file = _("#file1").files[0];
          let formdata = new FormData();
          formdata.append("file1", file);
          let ajax = new XMLHttpRequest();
          ajax.upload.addEventListener("progress", progressHandler, false);
          ajax.addEventListener("load", completeHandler, false);
          ajax.addEventListener("error", errorHandler, false);
          ajax.addEventListener("abort", abortHandler, false);
          ajax.open("POST", baseHost + ':82/upload');
          ajax.send(formdata);
        } else console.log(response.status); 
      }

      function progressHandler(event) {
        _("#loaded_n_total").innerHTML = "Carregado " + event.loaded + " de " + event.total + " bytes";
        let percent = (event.loaded / event.total) * 100;
        _("#progressOta").value = Math.round(percent);
        _("#status").innerHTML = Math.round(percent) + "% transferido";
        if (event.loaded  == event.total) _("#status").innerHTML = 'Enviado, aguarde resultado de conclusão';
      }

      function completeHandler(event) {
        _("#status").innerHTML = event.target.responseText;
        _("#progressOta").value = 0;
      }

      function errorHandler(event) {
        _("#status").innerHTML = "Falha ao enviar";
        _("#progressOta").value = 0;
      }

      function abortHandler(event) {
        _("#status").innerHTML = "Atualização abortado";
        _("#progressOta").value = 0;
      }
      </script>        
    </body>
</html>
